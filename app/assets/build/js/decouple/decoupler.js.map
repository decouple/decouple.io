{"version":3,"sources":["decouple/decoupler.js"],"names":[],"mappings":"AAAA;;AAEA,eAAe,MAAM,SAAN,CAAgB;AAC7B,aAAY,EAAE,MAAd;;AAEA,gBAAc;AACZ,SAAK,WAAL,GAAmB,EAAnB;AACD;;AAED,SAAO,QAAS,EAAE,KAAK,CAAC,MAAD,CAAvB,EAAiC,KAAM,EAAE,KAAzC,EAAgD;AAC9C,QAAG,iBAAiB,MAApB,EAA4B;AAC1B,aAAO,KAAK,YAAL,CAAkB,QAAlB,EAA4B,KAA5B,CAAP;AACD,KAFD,MAEO,IAAG,OAAO,KAAP,IAAiB,UAApB,EAAgC;AACrC,aAAO,KAAK,YAAL,CAAkB,QAAlB,EAA4B,KAA5B,CAAP;AACD;AACF;;AAED,eAAa,QAAS,EAAE,KAAK,CAAC,MAAD,CAA7B,EAAuC,GAAI,EAAE,MAA7C,EAAqD;AACnD,aAAS,OAAT,CAAkB,IAAD,IAAU;AACzB,UAAI,IAAJ,IAAY,KAAK,aAAL,CAAmB,IAAnB,CAAZ;AACD,KAFD;AAGD;;AAED,eAAa,QAAS,EAAE,KAAK,CAAC,MAAD,CAA7B,EAAuC,QAAS,EAAE,KAAlD,EAAyD;AACvD,QAAG,OAAO,QAAP,IAAoB,UAAvB,EAAmC;AACjC,aAAO,SAAS,IAAT,CAAc,GAAG,KAAK,cAAL,CAAoB,QAApB,CAAjB,CAAP;AACD;AACF;;AAED,gBAAc,IAAK,EAAE,MAArB,EAA6B;AAC3B,QAAG,KAAK,WAAL,CAAiB,cAAjB,CAAgC,IAAhC,CAAH,EAA0C;AACxC,aAAO,KAAK,WAAL,CAAiB,IAAjB,CAAP;AACD;AACD,WAAO,KAAP;AACD;;AAED,iBAAe,KAAM,EAAE,KAAK,CAAC,MAAD,CAA5B,EAAsC;AACpC,QAAI,YAAY,EAAhB;AACA,UAAM,OAAN,CAAe,IAAD,IAAU;AACtB,gBAAU,IAAV,CAAe,KAAK,aAAL,CAAmB,IAAnB,CAAf;AACD,KAFD;AAGA,WAAO,SAAP;AACD;AAxC4B","file":"decouple/decoupler.js","sourcesContent":["/* @flow */\n\nexport default class Decoupler {\n  injectables : Object;\n\n  constructor() {\n    this.injectables = {};\n  }\n\n  inject(injected : Array<string>, thing : mixed) {\n    if(thing instanceof Object) {\n      return this.injectObject(injected, thing);\n    } else if(typeof(thing) == 'function') {\n      return this.injectMethod(injected, thing);\n    }\n  }\n\n  injectObject(injected : Array<string>, obj : Object) {\n    injected.forEach((name) => {\n      obj[name] = this.getInjectable(name);\n    });\n  }\n\n  injectMethod(injected : Array<string>, callback : mixed) {\n    if(typeof(callback) == 'function') {\n      return callback.call(...this.getInjectables(injected));\n    }\n  }\n\n  getInjectable(name : string) {\n    if(this.injectables.hasOwnProperty(name)) {\n      return this.injectables[name];\n    }\n    return false;\n  }\n\n  getInjectables(names : Array<string>) {\n    let injecting = [];\n    names.forEach((name) => {\n      injecting.push(this.getInjectable(name));\n    });\n    return injecting;\n  }\n}\n"],"sourceRoot":"/source/"}